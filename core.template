readMe = ''' --- Meraki Rogue Python SDK Module ---

###FILENAME
Generated at ###DATE using organization "###ORG_NAME"

*** THIS IS NOT THE OFFICIAL MERAKI DASHBOARD API PYTHON SDK ***

The intent of this module is to provide an easy and reliable way to interact with endpoints that are not
part of the latest release of the official Meraki Python SDK using Python 3. These types of endpoints are mostly
Early Access (alpha/beta) ones, available to members of the Developer Early Access Program.

For all other uses, please use the official Meraki Python SDK instead:
https://github.com/meraki/dashboard-api-python


--- How to use this module ---

1. Rename the module file to meraki_rogue.py
2. Copy the module into the same directory as your script
3. In your script, add the following line to import the module:
    import meraki_rogue
4. You can now use the endpoint methods included in the module. For example, to get a list of the organizations
   your API key can access, add the following line to your code, assuming your API key is 1234:
    success, errors, response = meraki_rogue.getOrganizations(1234)
    
To find the correct method for the endpoint you want to use, first find its operationId or resource path. 
Some ways to find those are:
* The official Meraki Dashboard API documentation page: 
    https://developer.cisco.com/meraki/api-v1/
* The API documentation page built into your Meraki dashboard, via the "Help > API docs" menu item
* This custom API documentation server that includes alpha/beta endpoints: 
    https://github.com/mpapazog/meraki-diff-docs
* This custom Postman collection that includes alpha/beta endpoints: 
    https://github.com/meraki/automation-scripts/blob/master/postman_collection_generator.py
    
You can then open the module in your text editor and use its search functionality to find the endpoint
method you need. The method's opening comments will include info about its parameters.

In general, calling any of the endpoints is structured as follows:
    success, errors, response = meraki_rogue.<operationId>(<apiKey><url_parameters><query_options><request_body>)
    
The endpoints return a tuple of 3 values:
    success : Boolean, whether the operation was successful or not
    errors  : If the request was unsuccessful and returned error text, it will be here
    response: If the request was successful and JSON payload was returned as a response body, it will be here
    
Some endpoints can take query parameters or a request body as input. They are passed to the endpoint method
as dicttionaries, via the "query" and "body" parameters.

Example of calling a method with query parameters:
    apiKey = "1234"
    organizationId = "4567"
    query = {"timespan": 100000}
    success, errors, response = meraki_rogue.getOrganizationClientsBandwidthUsageHistory(apiKey, organizationId, query)

Example of calling a method with a request body:
    apiKey = "1234"
    organizationId = "4567"
    query = {"name": "Cloned Organization"}
    success, errors, response = meraki_rogue.cloneOrganization(apiKey, organizationId, body)

'''

def printHelp():
    print(readMe)
    
import time

from urllib.parse import urlencode
from requests import Session, utils

class NoRebuildAuthSession(Session):
    def rebuild_auth(self, prepared_request, response):
        """
        This method is intentionally empty. Needed to prevent auth header stripping on redirect. More info:
        https://stackoverflow.com/questions/60358216/python-requests-post-request-dropping-authorization-header
        """

API_MAX_RETRIES             = 3
API_CONNECT_TIMEOUT         = 60
API_TRANSMIT_TIMEOUT        = 60
API_STATUS_RATE_LIMIT       = 429
API_RETRY_DEFAULT_WAIT      = 3

#Set to True or False to enable/disable console logging of sent API requests
FLAG_REQUEST_VERBOSE        = True

API_BASE_URL                = "https://api.meraki.com/api/v1"

def merakiRequest(p_apiKey, p_httpVerb, p_endpoint, p_additionalHeaders=None, p_queryItems=None, 
        p_requestBody=None, p_verbose=False, p_retry=0):
    #returns success, errors, responseHeaders, responseBody
    
    if p_retry > API_MAX_RETRIES:
        if(p_verbose):
            print("ERROR: Reached max retries")
        return False, None, None, None
        
    bearerString = "Bearer " + str(p_apiKey)
    headers = {"Authorization": bearerString}
    if not p_additionalHeaders is None:
        headers.update(p_additionalHeaders)
        
    query = ""
    if not p_queryItems is None:
        qArrayFix = {}
        for item in p_queryItems:
            if isinstance(p_queryItems[item], list):
                qArrayFix["%s[]" % item] = p_queryItems[item]
            else:
                qArrayFix[item] = p_queryItems[item]
        query = "?" + urlencode(qArrayFix, True)
    url = API_BASE_URL + p_endpoint + query
    
    verb = p_httpVerb.upper()
    
    session = NoRebuildAuthSession()
    
    verbs   = {
        'DELETE'    : { 'function': session.delete, 'hasBody': False },
        'GET'       : { 'function': session.get,    'hasBody': False },
        'POST'      : { 'function': session.post,   'hasBody': True  },
        'PUT'       : { 'function': session.put,    'hasBody': True  }
    }

    try:
        if(p_verbose):
            print(verb, url)
            
        if verb in verbs:
            if verbs[verb]['hasBody'] and not p_requestBody is None:
                r = verbs[verb]['function'](
                    url,
                    headers =   headers,
                    json    =   p_requestBody,
                    timeout =   (API_CONNECT_TIMEOUT, API_TRANSMIT_TIMEOUT)
                )
            else: 
                r = verbs[verb]['function'](
                    url,
                    headers =   headers,
                    timeout =   (API_CONNECT_TIMEOUT, API_TRANSMIT_TIMEOUT)
                )
        else:
            return False, None, None, None
    except:
        return False, None, None, None
    
    if(p_verbose):
        print(r.status_code)
    
    success         = r.status_code in range (200, 299)
    errors          = None
    responseHeaders = None
    responseBody    = None
    
    if r.status_code == API_STATUS_RATE_LIMIT:
        retryInterval = API_RETRY_DEFAULT_WAIT
        if "Retry-After" in r.headers:
            retryInterval = r.headers["Retry-After"]
        if "retry-after" in r.headers:
            retryInterval = r.headers["retry-after"]
        
        if(p_verbose):
            print("INFO: Hit max request rate. Retrying %s after %s seconds" % (p_retry+1, retryInterval))
        time.sleep(int(retryInterval))
        success, errors, responseHeaders, responseBody = merakiRequest(p_apiKey, p_httpVerb, p_endpoint, p_additionalHeaders, 
            p_queryItems, p_requestBody, p_verbose, p_retry+1)
        return success, errors, responseHeaders, responseBody        
            
    try:
        rjson = r.json()
    except:
        rjson = None
        
    if not rjson is None:
        if "errors" in rjson:
            errors = rjson["errors"]
            if(p_verbose):
                print(errors)
        else:
            responseBody = rjson  

    if "Link" in r.headers:
        parsedLinks = utils.parse_header_links(r.headers["Link"])
        for link in parsedLinks:
            if link["rel"] == "next":
                if(p_verbose):
                    print("Next page:", link["url"])
                splitLink = link["url"].split("/api/v1")
                success, errors, responseHeaders, nextBody = merakiRequest(p_apiKey, p_httpVerb, splitLink[1], 
                    p_additionalHeaders=p_additionalHeaders, 
                    p_requestBody=p_requestBody, 
                    p_verbose=p_verbose)
                if success:
                    if not responseBody is None:
                        responseBody = responseBody + nextBody
                else:
                    responseBody = None
    
    return success, errors, responseHeaders, responseBody
    
    
    
# --- ENDPOINT METHODS BELOW ---
    
    
###ENDPOINTS